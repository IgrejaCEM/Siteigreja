const { db } = require('./database/db');
const fs = require('fs');
const path = require('path');

async function checkDatabasePersistence() {
  try {
    console.log('üîç Verificando persist√™ncia do banco de dados...');
    
    // Verificar se o arquivo do banco existe
    const dbPath = path.resolve('./database.sqlite');
    const dbExists = fs.existsSync(dbPath);
    console.log('üìÅ Arquivo do banco existe:', dbExists);
    
    if (dbExists) {
      const stats = fs.statSync(dbPath);
      console.log('üìä Tamanho do banco:', (stats.size / 1024 / 1024).toFixed(2), 'MB');
      console.log('ÔøΩÔøΩ √öltima modifica√ß√£o:', stats.mtime);
    }
    
    // Verificar dados no banco
    const events = await db('events').select('*');
    console.log('üìÖ Eventos no banco:', events.length);
    
    const registrations = await db('registrations').select('*');
    console.log('üìù Inscri√ß√µes no banco:', registrations.length);
    
    const products = await db('event_products').select('*');
    console.log('ÔøΩÔøΩÔ∏è Produtos no banco:', products.length);
    
    const payments = await db('payments').select('*');
    console.log('üí∞ Pagamentos no banco:', payments.length);
    
    // Verificar vari√°veis de ambiente
    console.log('üåç Ambiente:', process.env.NODE_ENV || 'development');
    console.log('ÔøΩÔøΩ Diret√≥rio atual:', process.cwd());
    console.log('ÔøΩÔøΩ Arquivos no diret√≥rio:', fs.readdirSync('.').filter(f => f.endsWith('.sqlite')));
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await db.destroy();
  }
}

checkDatabasePersistence(); 