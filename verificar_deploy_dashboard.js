const axios = require('axios');

async function verificarDeployDashboard() {
  console.log('üîç VERIFICANDO DEPLOY DA CORRE√á√ÉO DO DASHBOARD');
  console.log('================================================');
  console.log('‚è≥ Aguarde alguns minutos para o Render fazer o deploy...\n');
  
  let tentativas = 0;
  const maxTentativas = 15;
  
  const verificar = async () => {
    try {
      tentativas++;
      console.log(`üîÑ Tentativa ${tentativas}/${maxTentativas}...`);
      
      const response = await axios.get('https://siteigreja-1.onrender.com/api/admin/registrations/recent', {
        headers: {
          'Authorization': 'Bearer test-token'
        },
        timeout: 10000
      });
      
      console.log('‚úÖ SERVIDOR RESPONDEU!');
      console.log('üìä Total de inscri√ß√µes:', response.data.length);
      
      if (response.data.length > 0) {
        const primeira = response.data[0];
        console.log('\nüìã Primeira inscri√ß√£o:');
        console.log('   ID:', primeira.id);
        console.log('   Nome:', primeira.name);
        console.log('   Email:', primeira.email);
        console.log('   Evento:', primeira.event_title);
        console.log('   Status:', primeira.status);
        
        // Verificar se nome e email est√£o preenchidos
        const nomeOk = primeira.name && primeira.name !== '-';
        const emailOk = primeira.email && primeira.email !== '-';
        
        if (nomeOk && emailOk) {
          console.log('\nüéâ CORRE√á√ÉO APLICADA COM SUCESSO!');
          console.log('‚úÖ Nome e email est√£o sendo exibidos corretamente');
          console.log('‚úÖ Dashboard deve mostrar os dados agora');
          return true;
        } else {
          console.log('\n‚ö†Ô∏è CORRE√á√ÉO AINDA N√ÉO APLICADA');
          console.log('‚ùå Nome ou email ainda est√£o vazios');
          console.log('‚è≥ Aguardando deploy...');
          return false;
        }
      } else {
        console.log('üì≠ Nenhuma inscri√ß√£o encontrada para testar');
        return false;
      }
      
    } catch (error) {
      console.log(`‚ùå Erro na tentativa ${tentativas}:`, error.message);
      return false;
    }
  };
  
  // Tentar at√© maxTentativas ou at√© funcionar
  while (tentativas < maxTentativas) {
    const sucesso = await verificar();
    if (sucesso) {
      console.log('\nüéØ DEPLOY VERIFICADO COM SUCESSO!');
      console.log('‚úÖ A corre√ß√£o foi aplicada no servidor');
      console.log('üåê Acesse: https://igrejacemchurch.org/admin');
      console.log('üìä Verifique se os nomes e emails aparecem no dashboard');
      break;
    }
    
    if (tentativas < maxTentativas) {
      console.log(`‚è≥ Aguardando 30 segundos antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, 30000));
    }
  }
  
  if (tentativas >= maxTentativas) {
    console.log('\n‚è∞ TEMPO ESGOTADO');
    console.log('‚ö†Ô∏è O deploy pode estar demorando mais do que esperado');
    console.log('üåê Verifique manualmente: https://igrejacemchurch.org/admin');
  }
}

// Executar verifica√ß√£o
verificarDeployDashboard(); 